---

- name: ZSH Config
  lineinfile: dest=~/.zshrc line="[[ -s \"$HOME/.shrc\" ]] && source \"$HOME/.shrc\"" state=present create=yes

- name: Bash Config on mac
  tags: mac
  lineinfile: dest=~/.bash_profile line='{{ item }}' state=present create=yes
  with_items:    
    - "[[ -s \"$HOME/.shrc\" ]] && source \"$HOME/.shrc\"" 

- name: Bash config on ubuntu
  tags: ubuntu
  lineinfile: dest=~/.bashrc line='{{ item }}' state=present create=yes
  with_items:
    - "[[ -s \"$HOME/.shrc\" ]] && source \"$HOME/.shrc\""  

# - name: common shell config
#   lineinfile: 
#     dest: '~/.shrc' 
#     line: [
#       export DATEDIR=`date "+%Y-%m/%d/%H:%M"`
#     ]

#   with_items:    
#     # - "[[ ! -f $1 ]] && source $(brew --prefix)/share/antigen/antigen.zsh"
#     # - "antigen bundle zsh-users/zsh-syntax-highlighting"
#     # - "antigen apply"
#     # - "export EDITOR=nano"
#     # - "export PATH=$PATH:~/.composer/vendor/bin"
#     # - 'export PATH="$PATH:\$(yarn global bin)"'
#     # - 'export PATH=$PATH:vendor/bin'
#     # - 'COMPLETION_WAITING_DOTS="true"'

- name: common shell config
  blockinfile:
    dest: ~/.shrc
    create: yes
    marker: "# ANSIBLE {mark} shell functions"
    block: |
      export DATEDIR=`date "+%Y%m%d_%H%M"`
      export SODIUM_USE_PKG_CONFIG=1


- name: aliases into shrc
  blockinfile:
    dest: ~/.shrc
    create: yes
    marker: "# {mark} alias {{item.key}}"
    block: |
      alias {{ item.key }}="{{ item.value }}"
  with_dict: "{{aliases}}"
  vars:
    aliases:
      # gcod: "git checkout development"
      # gcos: "git checkout staging"
      # gcop: "git checkout production"
      # gmd: "git merge development"
      # gms: "git merge staging"
      # gmp: "git merge production"
      # gc: "git commit -m"
      # gs: git status
      # gpl: git pull
      # gp: git push  
      # gpt: "git push --tags"
      # gph: git push
      # update: "git push && gcos && gmd && git push && gcop && gms && git push && gcod"
      # git: hub
      # wherefiles: "lsof | awk '{ print $2; }' | uniq -c | sort -rn | head"
      # ls: exa
      octal: "stat -f '%A %a %N'"
      ip: "curl icanhazip.com"
      ls: "ls -a"
      mkdir: "mkdir -pv"
      # mkcd: "mkdir $1 && cd $1" // replaced with shell function
      wget: "wget -c"
      histg: "history | grep"
      echopath: 'echo $PATH | tr -s ":" "\n"'
      myip: "curl -sSL http://ipecho.net/plain | xargs echo"
      # webpic: "mogrify -resize 690\\> *.png"

- name: shell functions
  blockinfile:
    dest: ~/.shrc
    create: yes
    marker: "# ANSIBLE {mark} shell functions"
    block: |
      mkcd () {
        mkdir -p $1
        cd $1
      }
      randstring32() {
        cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1
      }
      randstring8() {
        cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 8 | head -n 1
      }
      createFileIfMissing(){
        # create file if doesn't exist, with right permission
        [[ ! -s $1 ]] && touch "$1" || [[ ! -s $1 ]] && sudo touch "$1"
      }
      addNewLineToFile(){
        [[ ! -e $1 ]] || [[ -w $1 ]] && printf "\n" >> $1 || [[ -e $1 ]] && [[ ! -w $1 ]] && sudo bash -c "printf \"\n\" >> $1"
      }
      appendFromURL(){
        createFileIfMissing $2
        [[ ! -e $2 ]] || [[ -w $2 ]] && curl -sSL $1 >> $2 || [[ -e $2 ]] && [[ ! -w $2 ]] && curl -sSL $1 | sudo tee -a "$2" >/dev/null
        addNewLineToFile $2
      }
      appendFromString(){
        createFileIfMissing $2
        [[ ! -e $2 ]] || [[ -w $2 ]] && printf $1 >> $2 || [[ -e $2 ]] && [[ ! -w $2 ]] && sudo bash -c "printf $1 >> $2"
        addNewLineToFile $2
      }
      appendFromFile(){
        createFileIfMissing $2
        [[ ! -e $2 ]] || [[ -w $2 ]] && cat $1 >> $2 || [[ -e $2 ]] && [[ ! -w $2 ]] && sudo bash -c "cat $1 >> $2"
        addNewLineToFile $2
      }
      appendIfMissing(){
        [[ -z $repo ]] && repo=$(cd $(dirname $BASH_SOURCE[0]) && cd .. && pwd)
        python "${repo}"/configs/appendIfMissing.py "${1}" "${2}"
      }
      putOnPath() {
        name=$(basename $1)
        [[ -x "$1" ]] && sudo ln -s $(realpath $1) /usr/local/bin/${name} || echo '[ERROR] file is not executable'
      }
      ghcp() {
        if [ ! -e ${2} ]; then echo "${2} set " && BRANCH=${2}; else BRANCH=master; fi
        curl "https://codeload.github.com/${1}/zip/${BRANCH}" | tar -xf - -C .
      }
      filemode() {
        stat -c '%a' $1
      }
      killport() {
        sudo kill -9 $(sudo lsof -t -i:${1} -sTCP:LISTEN)
      }
