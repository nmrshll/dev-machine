---

- name: ZSH Config
  lineinfile: dest=~/.zshrc line="[[ -s \"$HOME/.shrc\" ]] && source \"$HOME/.shrc\"" state=present create=yes

- name: Bash Config on mac
  tags: mac
  lineinfile: dest=~/.bash_profile line='{{ item }}' state=present create=yes
  with_items:    
    - "[[ -s \"$HOME/.shrc\" ]] && source \"$HOME/.shrc\"" 

- name: Bash config on ubuntu
  tags: ubuntu
  lineinfile: dest=~/.bashrc line='{{ item }}' state=present create=yes
  with_items:
    - "[[ -s \"$HOME/.shrc\" ]] && source \"$HOME/.shrc\""  

# - name: common shell config
#   lineinfile: dest=~/.shrc line='{{ item }}'
#   with_items:    
#     # - "[[ ! -f $1 ]] && source $(brew --prefix)/share/antigen/antigen.zsh"
#     # - "antigen bundle zsh-users/zsh-syntax-highlighting"
#     # - "antigen apply"
#     # - "export EDITOR=nano"
#     - "export PATH=$PATH:~/.composer/vendor/bin"
#     # - 'export PATH="$PATH:\$(yarn global bin)"'
#     # - 'export PATH=$PATH:vendor/bin'
#     # - 'COMPLETION_WAITING_DOTS="true"'

- name: aliases into shrc
  blockinfile:
    dest: ~/.shrc
    create: yes
    marker: "# {mark} alias {{item.key}}"
    block: |
      alias {{ item.key }}="{{ item.value }}"
  with_dict: "{{aliases}}"
  vars:
    aliases:
      # gcod: "git checkout development"
      # gcos: "git checkout staging"
      # gcop: "git checkout production"
      # gmd: "git merge development"
      # gms: "git merge staging"
      # gmp: "git merge production"
      # gc: "git commit -m"
      # gs: git status
      # gpl: git pull
      # gp: git push  
      # gpt: "git push --tags"
      # gph: git push
      # update: "git push && gcos && gmd && git push && gcop && gms && git push && gcod"
      # git: hub
      # wherefiles: "lsof | awk '{ print $2; }' | uniq -c | sort -rn | head"
      # ls: exa
      copy_ssh: "cat ~/.ssh/id_rsa.pub | pbcopy"
      chrome: "/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome"
      octal: "stat -f '%A %a %N'"
      ip: "curl icanhazip.com"
      ls: "ls -a"
      mkdir: "mkdir -pv"
      # mkcd: "mkdir $1 && cd $1" // replaced with shell function
      wget: "wget -c"
      histg: "history | grep"
      echopath: 'echo $PATH | tr -s ":" "\n"'
      myip: "curl -sSL http://ipecho.net/plain | xargs echo"
      # webpic: "mogrify -resize 690\\> *.png"

- name: shell functions
  blockinfile:
    dest: ~/.shrc
    create: yes
    marker: "# ANSIBLE {mark} shell functions"
    block: |
      mkcd () {
          mkdir -p $1
          cd $1
      }
      randstring32() {
          cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1
      }
      randstring8() {
          cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 8 | head -n 1
      }
      createFileIfMissing(){
          # create file if doesn't exist, with right permission
          [[ ! -s $1 ]] && touch "$1" || [[ ! -s $1 ]] && sudo touch "$1"
      }
      addNewLineToFile(){
          [[ ! -e $1 ]] || [[ -w $1 ]] && printf "\n" >> $1 || [[ -e $1 ]] && [[ ! -w $1 ]] && sudo bash -c "printf \"\n\" >> $1"
      }
      appendFromURL(){
          createFileIfMissing $2
          [[ ! -e $2 ]] || [[ -w $2 ]] && curl -sSL $1 >> $2 || [[ -e $2 ]] && [[ ! -w $2 ]] && curl -sSL $1 | sudo tee -a "$2" >/dev/null
          addNewLineToFile $2
      }
      appendFromString(){
          createFileIfMissing $2
          [[ ! -e $2 ]] || [[ -w $2 ]] && printf $1 >> $2 || [[ -e $2 ]] && [[ ! -w $2 ]] && sudo bash -c "printf $1 >> $2"
          addNewLineToFile $2
      }
      appendFromFile(){
          createFileIfMissing $2
          [[ ! -e $2 ]] || [[ -w $2 ]] && cat $1 >> $2 || [[ -e $2 ]] && [[ ! -w $2 ]] && sudo bash -c "cat $1 >> $2"
          addNewLineToFile $2
      }

      appendIfMissing(){
          [[ -z $repo ]] && repo=$(cd $(dirname $BASH_SOURCE[0]) && cd .. && pwd)
          python "${repo}"/configs/appendIfMissing.py "${1}" "${2}"
      }
      putOnPath() {
          name=$(basename $1)
          [[ -x "$1" ]] && sudo ln -s $(realpath $1) /usr/local/bin/${name} || echo '[ERROR] file is not executable'
      }

- name: shell functions for mac
  tags: mac
  blockinfile:
    dest: ~/.shrc
    create: yes
    marker: "# ANSIBLE {mark} shell functions for mac"
    block: |
      installDmgFromUrl() {
          URL=$1
          dmg=$(mktemp)
          wget -O ${dmg} $URL
          mountPoint=/Volumes/$(openssl rand -hex 16)
          echo ${mountPoint}
          hdiutil attach ${dmg} -mountpoint ${mountPoint}
          cd ${mountPoint}

          # install any .pkg
          sudo installer -pkg $(find *.pkg) -target "/"

          # install any .app
          for app in $(find ${mountPoint} -type d -maxdepth 2 -name \*.app); do
              cp -a ${app} /Applications/
          done

          hdiutil detach ${mountPoint}
          rm ${dmg}
      }

- name: shell functions for ubuntu
  tags: ubuntu
  blockinfile:
    dest: ~/.shrc
    create: yes
    marker: "# ANSIBLE {mark} shell functions for ubuntu"
    block: |
      wgetAndDpkg() {
        cd ~
        URL=$1
        FILE=`mktemp`
        wget "$URL" -O $FILE && sudo dpkg -i --force-depends $FILE	
        rm $FILE
      }
      wgetAndExecute() {
        URL=$1
        FILE=`mktemp`
        wget "$URL" -O $FILE
          chmod +x $FILE
          $FILE	
        rm $FILE
      }
      wgetAndSh() {
          URL=$1
        FILE=`mktemp`
        wget "$URL" -O $FILE
          sh $FILE
        rm $FILE
      }
      extract() {
          if [ -z "$1" ]; then
              echo "Usage: extract <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
          else
              if [ -f $1 ] ; then
                  if [ $# -eq 2 ]; then 
                      DEST=$2
                  else 
                      DEST=${1%.*}
                  fi

                  case $1 in
                  # *.tar.bz2)   tar xvjf ../$1    ;;
                  *.tar.gz)    tar xvzf ${DEST} $1    ;;
                  # *.tar.xz)    tar xvJf ../$1    ;;
                  # *.lzma)      unlzma ../$1      ;;
                  # *.bz2)       bunzip2 ../$1     ;;
                  # *.rar)       unrar x -ad ../$1 ;;
                  # *.gz)        gunzip ../$1      ;;
                  *.tar)       tar xvf ${DEST} $1     ;;
                  # *.tbz2)      tar xvjf ../$1    ;;
                  *.tgz)       tar -xvzf ${1} --directory=${DEST}    ;;
                  *.zip)       unzip -d ${DEST} $1      ;;
                  # *.Z)         uncompress ../$1  ;;
                  *.7z)        7z x $1 -o${DEST}        ;;
                  # *.xz)        unxz ../$1        ;;
                  # *.exe)       cabextract ../$1  ;;
                  *)           echo "extract: '$1' - unknown archive method" ;;
                  esac
              else
                  echo "$1 - file does not exist"
              fi
          fi
      }
      getAndExtract() {
          DWN_DEST=`mktemp -d`
          EXTRACT_DEST=`mktemp -d`
          DEST=${2}
          wget --content-disposition ${1} -P ${DWN_DEST}
          for f in ${DWN_DEST}/* 
          do
              echo "extracting file ${f} into ${EXTRACT_DEST}..."
              mkdir -p ${EXTRACT_DEST}
              extract ${f} ${EXTRACT_DEST}
          done
          [[ -w ${DEST} ]] && needSU=1
          echo ${needSU}
          rm -rf ${DWN_DEST}
          rm -rf ${EXTRACT_DEST}
      }
      newxp() {
          dir=$(randstring8)
          mkcd ~/dev/experiments/${dir}
          code .
      }
      newgoXP() {
          dir=$(randstring8)
          mkcd ~/dev/go/src/experiments/${dir}
          code .
      }